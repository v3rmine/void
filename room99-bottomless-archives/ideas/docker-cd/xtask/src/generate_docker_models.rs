use crate::{exec, exec_script};

const DOCKER_API_VERSION: &str = "v1.40";
const DOCKER_VERSION: &str = "v19.03.13";

pub async fn generate_docker_models() -> super::Result<()> {
    let pwd = std::env::var("PWD").unwrap();

    exec("mkdir .docker-tmp").await?;
    exec_script(&format!(
        "if [ ! -d $PWD/.docker-tmp/build ]; then docker run --rm -u 0:$(id -g) -v {pwd}/.docker-tmp/build:/local swaggerapi/swagger-codegen-cli:2.4.27 generate \
			-Dmodels \
			-i https://raw.githubusercontent.com/docker/engine/{DOCKER_VERSION}/api/swagger.yaml \
			-l rust \
			-o /local; fi"
    )).await?;
    exec("cp -r .docker-tmp/build/src/models .docker-tmp/models").await?;

    exec_script("echo '//! This file is autogenerated using `https://github.com/swagger-api/swagger-codegen`' >> .docker-tmp/models/mod.rs").await?;
    exec_script(&format!(
        "echo '//! Docker version: {DOCKER_VERSION}' >> .docker-tmp/models/mod.rs"
    ))
    .await?;
    exec_script(&format!(
        "echo '//! API version: {DOCKER_API_VERSION}' >> .docker-tmp/models/mod.rs"
    ))
    .await?;
    exec_script("echo '//! Please do not edit manually.' >> .docker-tmp/models/mod.rs").await?;

    exec_script(
        "for file in $(ls -I mod.rs .docker-tmp/models | sed -E 's/\\.rs$//'); do \
			sed -E -i \"s/use serde_json::Value;/use serde_json::Value;\\n#\\[allow\\(unused_imports\\)\\]\\nuse serde::{Deserialize, Serialize};/g\" \".docker-tmp/models/$file.rs\"; \
			sed -E -i \"s/::models::/super::/g\" \".docker-tmp/models/$file.rs\"; \
			sed -E -i \"s/^ \\*\\// *\\/\\n#![allow(dead_code, non_snake_case, clippy::redundant_field_names, clippy::too_many_arguments)]/\" \".docker-tmp/models/$file.rs\"; \
			sed -E -i \"s/  /    /g\" \".docker-tmp/models/$file.rs\"; \
			echo \"mod $file;\" >> .docker-tmp/models/mod.rs; \
			echo \"pub use $file::*;\" >> .docker-tmp/models/mod.rs; \
		done",
    )
    .await?;

    exec_script("if [ -d src/services/docker/models ]; then echo 'Error src/services/docker/models already exist'; exit 1; fi").await?;
    exec("cp -r .docker-tmp/models src/services/docker/models").await?;
    exec(&format!(
        "docker run --rm -u 0:0 -v {pwd}/.docker-tmp:/local alpine /bin/rm -rf /local/build"
    ))
    .await?;
    exec("rm -rf .docker-tmp").await?;

    Ok(())
}

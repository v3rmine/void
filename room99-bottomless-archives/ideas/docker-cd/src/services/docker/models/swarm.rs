/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.    Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.    # Errors    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:    ``` {     \"message\": \"page not found\" } ```    # Versioning    The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.    If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.    Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.    The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.     # Authentication    Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:    ``` {     \"username\": \"string\",     \"password\": \"string\",     \"email\": \"string\",     \"serveraddress\": \"string\" } ```    The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:    ``` {     \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.40
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(
    dead_code,
    non_snake_case,
    clippy::redundant_field_names,
    clippy::too_many_arguments
)]

#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Swarm {
    /// The ID of the swarm.
    #[serde(rename = "ID")]
    ID: Option<String>,
    #[serde(rename = "Version")]
    version: Option<super::ObjectVersion>,
    /// Date and time at which the swarm was initialised in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
    #[serde(rename = "CreatedAt")]
    created_at: Option<String>,
    /// Date and time at which the swarm was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
    #[serde(rename = "UpdatedAt")]
    updated_at: Option<String>,
    #[serde(rename = "Spec")]
    spec: Option<super::SwarmSpec>,
    #[serde(rename = "TLSInfo")]
    tls_info: Option<super::TlsInfo>,
    /// Whether there is currently a root CA rotation in progress for the swarm
    #[serde(rename = "RootRotationInProgress")]
    root_rotation_in_progress: Option<bool>,
    /// DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. If no port is set or is set to 0, the default port (4789) is used.
    #[serde(rename = "DataPathPort")]
    data_path_port: Option<i32>,
    /// Default Address Pool specifies default subnet pools for global scope networks.
    #[serde(rename = "DefaultAddrPool")]
    default_addr_pool: Option<Vec<String>>,
    /// SubnetSize specifies the subnet size of the networks created from the default subnet pool.
    #[serde(rename = "SubnetSize")]
    subnet_size: Option<i32>,
    #[serde(rename = "JoinTokens")]
    join_tokens: Option<super::JoinTokens>,
}

impl Swarm {
    pub fn new() -> Swarm {
        Swarm {
            ID: None,
            version: None,
            created_at: None,
            updated_at: None,
            spec: None,
            tls_info: None,
            root_rotation_in_progress: None,
            data_path_port: None,
            default_addr_pool: None,
            subnet_size: None,
            join_tokens: None,
        }
    }

    pub fn set_ID(&mut self, ID: String) {
        self.ID = Some(ID);
    }

    pub fn with_ID(mut self, ID: String) -> Swarm {
        self.ID = Some(ID);
        self
    }

    pub fn ID(&self) -> Option<&String> {
        self.ID.as_ref()
    }

    pub fn reset_ID(&mut self) {
        self.ID = None;
    }

    pub fn set_version(&mut self, version: super::ObjectVersion) {
        self.version = Some(version);
    }

    pub fn with_version(mut self, version: super::ObjectVersion) -> Swarm {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&super::ObjectVersion> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_created_at(&mut self, created_at: String) {
        self.created_at = Some(created_at);
    }

    pub fn with_created_at(mut self, created_at: String) -> Swarm {
        self.created_at = Some(created_at);
        self
    }

    pub fn created_at(&self) -> Option<&String> {
        self.created_at.as_ref()
    }

    pub fn reset_created_at(&mut self) {
        self.created_at = None;
    }

    pub fn set_updated_at(&mut self, updated_at: String) {
        self.updated_at = Some(updated_at);
    }

    pub fn with_updated_at(mut self, updated_at: String) -> Swarm {
        self.updated_at = Some(updated_at);
        self
    }

    pub fn updated_at(&self) -> Option<&String> {
        self.updated_at.as_ref()
    }

    pub fn reset_updated_at(&mut self) {
        self.updated_at = None;
    }

    pub fn set_spec(&mut self, spec: super::SwarmSpec) {
        self.spec = Some(spec);
    }

    pub fn with_spec(mut self, spec: super::SwarmSpec) -> Swarm {
        self.spec = Some(spec);
        self
    }

    pub fn spec(&self) -> Option<&super::SwarmSpec> {
        self.spec.as_ref()
    }

    pub fn reset_spec(&mut self) {
        self.spec = None;
    }

    pub fn set_tls_info(&mut self, tls_info: super::TlsInfo) {
        self.tls_info = Some(tls_info);
    }

    pub fn with_tls_info(mut self, tls_info: super::TlsInfo) -> Swarm {
        self.tls_info = Some(tls_info);
        self
    }

    pub fn tls_info(&self) -> Option<&super::TlsInfo> {
        self.tls_info.as_ref()
    }

    pub fn reset_tls_info(&mut self) {
        self.tls_info = None;
    }

    pub fn set_root_rotation_in_progress(&mut self, root_rotation_in_progress: bool) {
        self.root_rotation_in_progress = Some(root_rotation_in_progress);
    }

    pub fn with_root_rotation_in_progress(mut self, root_rotation_in_progress: bool) -> Swarm {
        self.root_rotation_in_progress = Some(root_rotation_in_progress);
        self
    }

    pub fn root_rotation_in_progress(&self) -> Option<&bool> {
        self.root_rotation_in_progress.as_ref()
    }

    pub fn reset_root_rotation_in_progress(&mut self) {
        self.root_rotation_in_progress = None;
    }

    pub fn set_data_path_port(&mut self, data_path_port: i32) {
        self.data_path_port = Some(data_path_port);
    }

    pub fn with_data_path_port(mut self, data_path_port: i32) -> Swarm {
        self.data_path_port = Some(data_path_port);
        self
    }

    pub fn data_path_port(&self) -> Option<&i32> {
        self.data_path_port.as_ref()
    }

    pub fn reset_data_path_port(&mut self) {
        self.data_path_port = None;
    }

    pub fn set_default_addr_pool(&mut self, default_addr_pool: Vec<String>) {
        self.default_addr_pool = Some(default_addr_pool);
    }

    pub fn with_default_addr_pool(mut self, default_addr_pool: Vec<String>) -> Swarm {
        self.default_addr_pool = Some(default_addr_pool);
        self
    }

    pub fn default_addr_pool(&self) -> Option<&Vec<String>> {
        self.default_addr_pool.as_ref()
    }

    pub fn reset_default_addr_pool(&mut self) {
        self.default_addr_pool = None;
    }

    pub fn set_subnet_size(&mut self, subnet_size: i32) {
        self.subnet_size = Some(subnet_size);
    }

    pub fn with_subnet_size(mut self, subnet_size: i32) -> Swarm {
        self.subnet_size = Some(subnet_size);
        self
    }

    pub fn subnet_size(&self) -> Option<&i32> {
        self.subnet_size.as_ref()
    }

    pub fn reset_subnet_size(&mut self) {
        self.subnet_size = None;
    }

    pub fn set_join_tokens(&mut self, join_tokens: super::JoinTokens) {
        self.join_tokens = Some(join_tokens);
    }

    pub fn with_join_tokens(mut self, join_tokens: super::JoinTokens) -> Swarm {
        self.join_tokens = Some(join_tokens);
        self
    }

    pub fn join_tokens(&self) -> Option<&super::JoinTokens> {
        self.join_tokens.as_ref()
    }

    pub fn reset_join_tokens(&mut self) {
        self.join_tokens = None;
    }
}

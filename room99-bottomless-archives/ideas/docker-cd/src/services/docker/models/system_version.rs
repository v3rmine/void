/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.    Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.    # Errors    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:    ``` {     \"message\": \"page not found\" } ```    # Versioning    The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.    If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.    Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.    The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.     # Authentication    Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:    ``` {     \"username\": \"string\",     \"password\": \"string\",     \"email\": \"string\",     \"serveraddress\": \"string\" } ```    The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:    ``` {     \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.40
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(
    dead_code,
    non_snake_case,
    clippy::redundant_field_names,
    clippy::too_many_arguments
)]

#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
/// SystemVersion : Response of Engine API: GET \"/version\"

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SystemVersion {
    #[serde(rename = "Platform")]
    platform: Option<super::SystemVersionPlatform>,
    /// Information about system components
    #[serde(rename = "Components")]
    components: Option<Vec<super::SystemVersionComponents>>,
    /// The version of the daemon
    #[serde(rename = "Version")]
    version: Option<String>,
    /// The default (and highest) API version that is supported by the daemon
    #[serde(rename = "ApiVersion")]
    api_version: Option<String>,
    /// The minimum API version that is supported by the daemon
    #[serde(rename = "MinAPIVersion")]
    min_api_version: Option<String>,
    /// The Git commit of the source code that was used to build the daemon
    #[serde(rename = "GitCommit")]
    git_commit: Option<String>,
    /// The version Go used to compile the daemon, and the version of the Go runtime in use.
    #[serde(rename = "GoVersion")]
    go_version: Option<String>,
    /// The operating system that the daemon is running on (\"linux\" or \"windows\")
    #[serde(rename = "Os")]
    os: Option<String>,
    /// The architecture that the daemon is running on
    #[serde(rename = "Arch")]
    arch: Option<String>,
    /// The kernel version (`uname -r`) that the daemon is running on.    This field is omitted when empty.
    #[serde(rename = "KernelVersion")]
    kernel_version: Option<String>,
    /// Indicates if the daemon is started with experimental features enabled.    This field is omitted when empty / false.
    #[serde(rename = "Experimental")]
    experimental: Option<bool>,
    /// The date and time that the daemon was compiled.
    #[serde(rename = "BuildTime")]
    build_time: Option<String>,
}

impl SystemVersion {
    /// Response of Engine API: GET \"/version\"
    pub fn new() -> SystemVersion {
        SystemVersion {
            platform: None,
            components: None,
            version: None,
            api_version: None,
            min_api_version: None,
            git_commit: None,
            go_version: None,
            os: None,
            arch: None,
            kernel_version: None,
            experimental: None,
            build_time: None,
        }
    }

    pub fn set_platform(&mut self, platform: super::SystemVersionPlatform) {
        self.platform = Some(platform);
    }

    pub fn with_platform(mut self, platform: super::SystemVersionPlatform) -> SystemVersion {
        self.platform = Some(platform);
        self
    }

    pub fn platform(&self) -> Option<&super::SystemVersionPlatform> {
        self.platform.as_ref()
    }

    pub fn reset_platform(&mut self) {
        self.platform = None;
    }

    pub fn set_components(&mut self, components: Vec<super::SystemVersionComponents>) {
        self.components = Some(components);
    }

    pub fn with_components(
        mut self,
        components: Vec<super::SystemVersionComponents>,
    ) -> SystemVersion {
        self.components = Some(components);
        self
    }

    pub fn components(&self) -> Option<&Vec<super::SystemVersionComponents>> {
        self.components.as_ref()
    }

    pub fn reset_components(&mut self) {
        self.components = None;
    }

    pub fn set_version(&mut self, version: String) {
        self.version = Some(version);
    }

    pub fn with_version(mut self, version: String) -> SystemVersion {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&String> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_api_version(&mut self, api_version: String) {
        self.api_version = Some(api_version);
    }

    pub fn with_api_version(mut self, api_version: String) -> SystemVersion {
        self.api_version = Some(api_version);
        self
    }

    pub fn api_version(&self) -> Option<&String> {
        self.api_version.as_ref()
    }

    pub fn reset_api_version(&mut self) {
        self.api_version = None;
    }

    pub fn set_min_api_version(&mut self, min_api_version: String) {
        self.min_api_version = Some(min_api_version);
    }

    pub fn with_min_api_version(mut self, min_api_version: String) -> SystemVersion {
        self.min_api_version = Some(min_api_version);
        self
    }

    pub fn min_api_version(&self) -> Option<&String> {
        self.min_api_version.as_ref()
    }

    pub fn reset_min_api_version(&mut self) {
        self.min_api_version = None;
    }

    pub fn set_git_commit(&mut self, git_commit: String) {
        self.git_commit = Some(git_commit);
    }

    pub fn with_git_commit(mut self, git_commit: String) -> SystemVersion {
        self.git_commit = Some(git_commit);
        self
    }

    pub fn git_commit(&self) -> Option<&String> {
        self.git_commit.as_ref()
    }

    pub fn reset_git_commit(&mut self) {
        self.git_commit = None;
    }

    pub fn set_go_version(&mut self, go_version: String) {
        self.go_version = Some(go_version);
    }

    pub fn with_go_version(mut self, go_version: String) -> SystemVersion {
        self.go_version = Some(go_version);
        self
    }

    pub fn go_version(&self) -> Option<&String> {
        self.go_version.as_ref()
    }

    pub fn reset_go_version(&mut self) {
        self.go_version = None;
    }

    pub fn set_os(&mut self, os: String) {
        self.os = Some(os);
    }

    pub fn with_os(mut self, os: String) -> SystemVersion {
        self.os = Some(os);
        self
    }

    pub fn os(&self) -> Option<&String> {
        self.os.as_ref()
    }

    pub fn reset_os(&mut self) {
        self.os = None;
    }

    pub fn set_arch(&mut self, arch: String) {
        self.arch = Some(arch);
    }

    pub fn with_arch(mut self, arch: String) -> SystemVersion {
        self.arch = Some(arch);
        self
    }

    pub fn arch(&self) -> Option<&String> {
        self.arch.as_ref()
    }

    pub fn reset_arch(&mut self) {
        self.arch = None;
    }

    pub fn set_kernel_version(&mut self, kernel_version: String) {
        self.kernel_version = Some(kernel_version);
    }

    pub fn with_kernel_version(mut self, kernel_version: String) -> SystemVersion {
        self.kernel_version = Some(kernel_version);
        self
    }

    pub fn kernel_version(&self) -> Option<&String> {
        self.kernel_version.as_ref()
    }

    pub fn reset_kernel_version(&mut self) {
        self.kernel_version = None;
    }

    pub fn set_experimental(&mut self, experimental: bool) {
        self.experimental = Some(experimental);
    }

    pub fn with_experimental(mut self, experimental: bool) -> SystemVersion {
        self.experimental = Some(experimental);
        self
    }

    pub fn experimental(&self) -> Option<&bool> {
        self.experimental.as_ref()
    }

    pub fn reset_experimental(&mut self) {
        self.experimental = None;
    }

    pub fn set_build_time(&mut self, build_time: String) {
        self.build_time = Some(build_time);
    }

    pub fn with_build_time(mut self, build_time: String) -> SystemVersion {
        self.build_time = Some(build_time);
        self
    }

    pub fn build_time(&self) -> Option<&String> {
        self.build_time.as_ref()
    }

    pub fn reset_build_time(&mut self) {
        self.build_time = None;
    }
}

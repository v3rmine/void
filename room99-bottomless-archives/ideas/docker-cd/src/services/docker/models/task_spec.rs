/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.    Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.    # Errors    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:    ``` {     \"message\": \"page not found\" } ```    # Versioning    The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.    If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.    Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.    The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.     # Authentication    Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:    ``` {     \"username\": \"string\",     \"password\": \"string\",     \"email\": \"string\",     \"serveraddress\": \"string\" } ```    The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:    ``` {     \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.40
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(
    dead_code,
    non_snake_case,
    clippy::redundant_field_names,
    clippy::too_many_arguments
)]

#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
/// TaskSpec : User modifiable task configuration.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TaskSpec {
    #[serde(rename = "PluginSpec")]
    plugin_spec: Option<super::TaskSpecPluginSpec>,
    #[serde(rename = "ContainerSpec")]
    container_spec: Option<super::TaskSpecContainerSpec>,
    #[serde(rename = "NetworkAttachmentSpec")]
    network_attachment_spec: Option<super::TaskSpecNetworkAttachmentSpec>,
    #[serde(rename = "Resources")]
    resources: Option<super::TaskSpecResources>,
    #[serde(rename = "RestartPolicy")]
    restart_policy: Option<super::TaskSpecRestartPolicy>,
    #[serde(rename = "Placement")]
    placement: Option<super::TaskSpecPlacement>,
    /// A counter that triggers an update even if no relevant parameters have been changed.
    #[serde(rename = "ForceUpdate")]
    force_update: Option<i32>,
    /// Runtime is the type of runtime specified for the task executor.
    #[serde(rename = "Runtime")]
    runtime: Option<String>,
    /// Specifies which networks the service should attach to.
    #[serde(rename = "Networks")]
    networks: Option<Vec<super::NetworkAttachmentConfig>>,
    #[serde(rename = "LogDriver")]
    log_driver: Option<super::TaskSpecLogDriver>,
}

impl TaskSpec {
    /// User modifiable task configuration.
    pub fn new() -> TaskSpec {
        TaskSpec {
            plugin_spec: None,
            container_spec: None,
            network_attachment_spec: None,
            resources: None,
            restart_policy: None,
            placement: None,
            force_update: None,
            runtime: None,
            networks: None,
            log_driver: None,
        }
    }

    pub fn set_plugin_spec(&mut self, plugin_spec: super::TaskSpecPluginSpec) {
        self.plugin_spec = Some(plugin_spec);
    }

    pub fn with_plugin_spec(mut self, plugin_spec: super::TaskSpecPluginSpec) -> TaskSpec {
        self.plugin_spec = Some(plugin_spec);
        self
    }

    pub fn plugin_spec(&self) -> Option<&super::TaskSpecPluginSpec> {
        self.plugin_spec.as_ref()
    }

    pub fn reset_plugin_spec(&mut self) {
        self.plugin_spec = None;
    }

    pub fn set_container_spec(&mut self, container_spec: super::TaskSpecContainerSpec) {
        self.container_spec = Some(container_spec);
    }

    pub fn with_container_spec(mut self, container_spec: super::TaskSpecContainerSpec) -> TaskSpec {
        self.container_spec = Some(container_spec);
        self
    }

    pub fn container_spec(&self) -> Option<&super::TaskSpecContainerSpec> {
        self.container_spec.as_ref()
    }

    pub fn reset_container_spec(&mut self) {
        self.container_spec = None;
    }

    pub fn set_network_attachment_spec(
        &mut self,
        network_attachment_spec: super::TaskSpecNetworkAttachmentSpec,
    ) {
        self.network_attachment_spec = Some(network_attachment_spec);
    }

    pub fn with_network_attachment_spec(
        mut self,
        network_attachment_spec: super::TaskSpecNetworkAttachmentSpec,
    ) -> TaskSpec {
        self.network_attachment_spec = Some(network_attachment_spec);
        self
    }

    pub fn network_attachment_spec(&self) -> Option<&super::TaskSpecNetworkAttachmentSpec> {
        self.network_attachment_spec.as_ref()
    }

    pub fn reset_network_attachment_spec(&mut self) {
        self.network_attachment_spec = None;
    }

    pub fn set_resources(&mut self, resources: super::TaskSpecResources) {
        self.resources = Some(resources);
    }

    pub fn with_resources(mut self, resources: super::TaskSpecResources) -> TaskSpec {
        self.resources = Some(resources);
        self
    }

    pub fn resources(&self) -> Option<&super::TaskSpecResources> {
        self.resources.as_ref()
    }

    pub fn reset_resources(&mut self) {
        self.resources = None;
    }

    pub fn set_restart_policy(&mut self, restart_policy: super::TaskSpecRestartPolicy) {
        self.restart_policy = Some(restart_policy);
    }

    pub fn with_restart_policy(mut self, restart_policy: super::TaskSpecRestartPolicy) -> TaskSpec {
        self.restart_policy = Some(restart_policy);
        self
    }

    pub fn restart_policy(&self) -> Option<&super::TaskSpecRestartPolicy> {
        self.restart_policy.as_ref()
    }

    pub fn reset_restart_policy(&mut self) {
        self.restart_policy = None;
    }

    pub fn set_placement(&mut self, placement: super::TaskSpecPlacement) {
        self.placement = Some(placement);
    }

    pub fn with_placement(mut self, placement: super::TaskSpecPlacement) -> TaskSpec {
        self.placement = Some(placement);
        self
    }

    pub fn placement(&self) -> Option<&super::TaskSpecPlacement> {
        self.placement.as_ref()
    }

    pub fn reset_placement(&mut self) {
        self.placement = None;
    }

    pub fn set_force_update(&mut self, force_update: i32) {
        self.force_update = Some(force_update);
    }

    pub fn with_force_update(mut self, force_update: i32) -> TaskSpec {
        self.force_update = Some(force_update);
        self
    }

    pub fn force_update(&self) -> Option<&i32> {
        self.force_update.as_ref()
    }

    pub fn reset_force_update(&mut self) {
        self.force_update = None;
    }

    pub fn set_runtime(&mut self, runtime: String) {
        self.runtime = Some(runtime);
    }

    pub fn with_runtime(mut self, runtime: String) -> TaskSpec {
        self.runtime = Some(runtime);
        self
    }

    pub fn runtime(&self) -> Option<&String> {
        self.runtime.as_ref()
    }

    pub fn reset_runtime(&mut self) {
        self.runtime = None;
    }

    pub fn set_networks(&mut self, networks: Vec<super::NetworkAttachmentConfig>) {
        self.networks = Some(networks);
    }

    pub fn with_networks(mut self, networks: Vec<super::NetworkAttachmentConfig>) -> TaskSpec {
        self.networks = Some(networks);
        self
    }

    pub fn networks(&self) -> Option<&Vec<super::NetworkAttachmentConfig>> {
        self.networks.as_ref()
    }

    pub fn reset_networks(&mut self) {
        self.networks = None;
    }

    pub fn set_log_driver(&mut self, log_driver: super::TaskSpecLogDriver) {
        self.log_driver = Some(log_driver);
    }

    pub fn with_log_driver(mut self, log_driver: super::TaskSpecLogDriver) -> TaskSpec {
        self.log_driver = Some(log_driver);
        self
    }

    pub fn log_driver(&self) -> Option<&super::TaskSpecLogDriver> {
        self.log_driver.as_ref()
    }

    pub fn reset_log_driver(&mut self) {
        self.log_driver = None;
    }
}

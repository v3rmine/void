/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.    Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.    # Errors    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:    ``` {     \"message\": \"page not found\" } ```    # Versioning    The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.    If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.    Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.    The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.     # Authentication    Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:    ``` {     \"username\": \"string\",     \"password\": \"string\",     \"email\": \"string\",     \"serveraddress\": \"string\" } ```    The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:    ``` {     \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.40
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(
    dead_code,
    non_snake_case,
    clippy::redundant_field_names,
    clippy::too_many_arguments
)]

#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
/// HostConfig : Container configuration that depends on the host we are running on

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HostConfig {
    /// An integer value representing this container's relative CPU weight versus other containers.
    #[serde(rename = "CpuShares")]
    cpu_shares: Option<i32>,
    /// Memory limit in bytes.
    #[serde(rename = "Memory")]
    memory: Option<i64>,
    /// Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
    #[serde(rename = "CgroupParent")]
    cgroup_parent: Option<String>,
    /// Block IO weight (relative weight).
    #[serde(rename = "BlkioWeight")]
    blkio_weight: Option<i32>,
    /// Block IO weight (relative device weight) in the form:    ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```
    #[serde(rename = "BlkioWeightDevice")]
    blkio_weight_device: Option<Vec<super::ResourcesBlkioWeightDevice>>,
    /// Limit read rate (bytes per second) from a device, in the form:    ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    #[serde(rename = "BlkioDeviceReadBps")]
    blkio_device_read_bps: Option<Vec<super::ThrottleDevice>>,
    /// Limit write rate (bytes per second) to a device, in the form:    ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    #[serde(rename = "BlkioDeviceWriteBps")]
    blkio_device_write_bps: Option<Vec<super::ThrottleDevice>>,
    /// Limit read rate (IO per second) from a device, in the form:    ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    #[serde(rename = "BlkioDeviceReadIOps")]
    blkio_device_read_i_ops: Option<Vec<super::ThrottleDevice>>,
    /// Limit write rate (IO per second) to a device, in the form:    ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    #[serde(rename = "BlkioDeviceWriteIOps")]
    blkio_device_write_i_ops: Option<Vec<super::ThrottleDevice>>,
    /// The length of a CPU period in microseconds.
    #[serde(rename = "CpuPeriod")]
    cpu_period: Option<i64>,
    /// Microseconds of CPU time that the container can get in a CPU period.
    #[serde(rename = "CpuQuota")]
    cpu_quota: Option<i64>,
    /// The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
    #[serde(rename = "CpuRealtimePeriod")]
    cpu_realtime_period: Option<i64>,
    /// The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
    #[serde(rename = "CpuRealtimeRuntime")]
    cpu_realtime_runtime: Option<i64>,
    /// CPUs in which to allow execution (e.g., `0-3`, `0,1`).
    #[serde(rename = "CpusetCpus")]
    cpuset_cpus: Option<String>,
    /// Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
    #[serde(rename = "CpusetMems")]
    cpuset_mems: Option<String>,
    /// A list of devices to add to the container.
    #[serde(rename = "Devices")]
    devices: Option<Vec<super::DeviceMapping>>,
    /// a list of cgroup rules to apply to the container
    #[serde(rename = "DeviceCgroupRules")]
    device_cgroup_rules: Option<Vec<String>>,
    /// A list of requests for devices to be sent to device drivers.
    #[serde(rename = "DeviceRequests")]
    device_requests: Option<Vec<super::DeviceRequest>>,
    /// Kernel memory limit in bytes.
    #[serde(rename = "KernelMemory")]
    kernel_memory: Option<i64>,
    /// Hard limit for kernel TCP buffer memory (in bytes).
    #[serde(rename = "KernelMemoryTCP")]
    kernel_memory_tcp: Option<i64>,
    /// Memory soft limit in bytes.
    #[serde(rename = "MemoryReservation")]
    memory_reservation: Option<i64>,
    /// Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
    #[serde(rename = "MemorySwap")]
    memory_swap: Option<i64>,
    /// Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
    #[serde(rename = "MemorySwappiness")]
    memory_swappiness: Option<i64>,
    /// CPU quota in units of 10<sup>-9</sup> CPUs.
    #[serde(rename = "NanoCPUs")]
    nano_cp_us: Option<i64>,
    /// Disable OOM Killer for the container.
    #[serde(rename = "OomKillDisable")]
    oom_kill_disable: Option<bool>,
    /// Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
    #[serde(rename = "Init")]
    init: Option<bool>,
    /// Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
    #[serde(rename = "PidsLimit")]
    pids_limit: Option<i64>,
    /// A list of resource limits to set in the container. For example:    ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```
    #[serde(rename = "Ulimits")]
    ulimits: Option<Vec<super::ResourcesUlimits>>,
    /// The number of usable CPUs (Windows only).    On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
    #[serde(rename = "CpuCount")]
    cpu_count: Option<i64>,
    /// The usable percentage of the available CPUs (Windows only).    On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
    #[serde(rename = "CpuPercent")]
    cpu_percent: Option<i64>,
    /// Maximum IOps for the container system drive (Windows only)
    #[serde(rename = "IOMaximumIOps")]
    io_maximum_i_ops: Option<i64>,
    /// Maximum IO in bytes per second for the container system drive (Windows only).
    #[serde(rename = "IOMaximumBandwidth")]
    io_maximum_bandwidth: Option<i64>,
    /// A list of volume bindings for this container. Each volume binding is a string in one of these forms:    - `host-src:container-dest[:options]` to bind-mount a host path     into the container. Both `host-src`, and `container-dest` must     be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume     managed by a volume driver into the container. `container-dest`     must be an _absolute_ path.    `options` is an optional, comma-delimited list of:    - `nocopy` disables automatic copying of data from the container     path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.     If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers     to read and write to the same volume.         - `z`: a _shared_ content label is applied to the content. This             label indicates that multiple containers can share the volume             content, for both reading and writing.         - `Z`: a _private unshared_ label is applied to the content.             This label indicates that only the current container can use             a private volume. Labeling systems such as SELinux require             proper labels to be placed on volume content that is mounted             into a container. Without a label, the security system can             prevent a container's processes from using the content. By             default, the labels set by the host operating system are not             modified. - `[[r]shared|[r]slave|[r]private]` specifies mount     [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).     This only applies to bind-mounted volumes, not internal volumes     or named volumes. Mount propagation requires the source mount     point (the location where the source directory is mounted in the     host operating system) to have the correct propagation properties.     For shared volumes, the source mount point must be set to `shared`.     For slave volumes, the mount must be set to either `shared` or     `slave`.
    #[serde(rename = "Binds")]
    binds: Option<Vec<String>>,
    /// Path to a file where the container ID is written
    #[serde(rename = "ContainerIDFile")]
    container_id_file: Option<String>,
    #[serde(rename = "LogConfig")]
    log_config: Option<super::HostConfigLogConfig>,
    /// Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.
    #[serde(rename = "NetworkMode")]
    network_mode: Option<String>,
    #[serde(rename = "PortBindings")]
    port_bindings: Option<super::PortMap>,
    #[serde(rename = "RestartPolicy")]
    restart_policy: Option<super::RestartPolicy>,
    /// Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
    #[serde(rename = "AutoRemove")]
    auto_remove: Option<bool>,
    /// Driver that this container uses to mount volumes.
    #[serde(rename = "VolumeDriver")]
    volume_driver: Option<String>,
    /// A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
    #[serde(rename = "VolumesFrom")]
    volumes_from: Option<Vec<String>>,
    /// Specification for mounts to be added to the container.
    #[serde(rename = "Mounts")]
    mounts: Option<Vec<super::Mount>>,
    /// A list of kernel capabilities to be available for container (this overrides the default set).    Conflicts with options 'CapAdd' and 'CapDrop'\"
    #[serde(rename = "Capabilities")]
    capabilities: Option<Vec<String>>,
    /// A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'.
    #[serde(rename = "CapAdd")]
    cap_add: Option<Vec<String>>,
    /// A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'.
    #[serde(rename = "CapDrop")]
    cap_drop: Option<Vec<String>>,
    /// A list of DNS servers for the container to use.
    #[serde(rename = "Dns")]
    dns: Option<Vec<String>>,
    /// A list of DNS options.
    #[serde(rename = "DnsOptions")]
    dns_options: Option<Vec<String>>,
    /// A list of DNS search domains.
    #[serde(rename = "DnsSearch")]
    dns_search: Option<Vec<String>>,
    /// A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.
    #[serde(rename = "ExtraHosts")]
    extra_hosts: Option<Vec<String>>,
    /// A list of additional groups that the container process will run as.
    #[serde(rename = "GroupAdd")]
    group_add: Option<Vec<String>>,
    /// IPC sharing mode for the container. Possible values are:    - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace    If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.
    #[serde(rename = "IpcMode")]
    ipc_mode: Option<String>,
    /// Cgroup to use for the container.
    #[serde(rename = "Cgroup")]
    cgroup: Option<String>,
    /// A list of links for the container in the form `container_name:alias`.
    #[serde(rename = "Links")]
    links: Option<Vec<String>>,
    /// An integer value containing the score given to the container in order to tune OOM killer preferences.
    #[serde(rename = "OomScoreAdj")]
    oom_score_adj: Option<i32>,
    /// Set the PID (Process) Namespace mode for the container. It can be either:    - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container
    #[serde(rename = "PidMode")]
    pid_mode: Option<String>,
    /// Gives the container full access to the host.
    #[serde(rename = "Privileged")]
    privileged: Option<bool>,
    /// Allocates an ephemeral host port for all of a container's exposed ports.    Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.    The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
    #[serde(rename = "PublishAllPorts")]
    publish_all_ports: Option<bool>,
    /// Mount the container's root filesystem as read only.
    #[serde(rename = "ReadonlyRootfs")]
    readonly_rootfs: Option<bool>,
    /// A list of string values to customize labels for MLS systems, such as SELinux.
    #[serde(rename = "SecurityOpt")]
    security_opt: Option<Vec<String>>,
    /// Storage driver options for this container, in the form `{\"size\": \"120G\"}`.
    #[serde(rename = "StorageOpt")]
    storage_opt: Option<::std::collections::HashMap<String, String>>,
    /// A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:    ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ```
    #[serde(rename = "Tmpfs")]
    tmpfs: Option<::std::collections::HashMap<String, String>>,
    /// UTS namespace to use for the container.
    #[serde(rename = "UTSMode")]
    uts_mode: Option<String>,
    /// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
    #[serde(rename = "UsernsMode")]
    userns_mode: Option<String>,
    /// Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
    #[serde(rename = "ShmSize")]
    shm_size: Option<i32>,
    /// A list of kernel parameters (sysctls) to set in the container. For example:    ``` {\"net.ipv4.ip_forward\": \"1\"} ```
    #[serde(rename = "Sysctls")]
    sysctls: Option<::std::collections::HashMap<String, String>>,
    /// Runtime to use with this container.
    #[serde(rename = "Runtime")]
    runtime: Option<String>,
    /// Initial console size, as an `[height, width]` array. (Windows only)
    #[serde(rename = "ConsoleSize")]
    console_size: Option<Vec<i32>>,
    /// Isolation technology of the container. (Windows only)
    #[serde(rename = "Isolation")]
    isolation: Option<String>,
    /// The list of paths to be masked inside the container (this overrides the default set of paths).
    #[serde(rename = "MaskedPaths")]
    masked_paths: Option<Vec<String>>,
    /// The list of paths to be set as read-only inside the container (this overrides the default set of paths).
    #[serde(rename = "ReadonlyPaths")]
    readonly_paths: Option<Vec<String>>,
}

impl HostConfig {
    /// Container configuration that depends on the host we are running on
    pub fn new() -> HostConfig {
        HostConfig {
            cpu_shares: None,
            memory: None,
            cgroup_parent: None,
            blkio_weight: None,
            blkio_weight_device: None,
            blkio_device_read_bps: None,
            blkio_device_write_bps: None,
            blkio_device_read_i_ops: None,
            blkio_device_write_i_ops: None,
            cpu_period: None,
            cpu_quota: None,
            cpu_realtime_period: None,
            cpu_realtime_runtime: None,
            cpuset_cpus: None,
            cpuset_mems: None,
            devices: None,
            device_cgroup_rules: None,
            device_requests: None,
            kernel_memory: None,
            kernel_memory_tcp: None,
            memory_reservation: None,
            memory_swap: None,
            memory_swappiness: None,
            nano_cp_us: None,
            oom_kill_disable: None,
            init: None,
            pids_limit: None,
            ulimits: None,
            cpu_count: None,
            cpu_percent: None,
            io_maximum_i_ops: None,
            io_maximum_bandwidth: None,
            binds: None,
            container_id_file: None,
            log_config: None,
            network_mode: None,
            port_bindings: None,
            restart_policy: None,
            auto_remove: None,
            volume_driver: None,
            volumes_from: None,
            mounts: None,
            capabilities: None,
            cap_add: None,
            cap_drop: None,
            dns: None,
            dns_options: None,
            dns_search: None,
            extra_hosts: None,
            group_add: None,
            ipc_mode: None,
            cgroup: None,
            links: None,
            oom_score_adj: None,
            pid_mode: None,
            privileged: None,
            publish_all_ports: None,
            readonly_rootfs: None,
            security_opt: None,
            storage_opt: None,
            tmpfs: None,
            uts_mode: None,
            userns_mode: None,
            shm_size: None,
            sysctls: None,
            runtime: None,
            console_size: None,
            isolation: None,
            masked_paths: None,
            readonly_paths: None,
        }
    }

    pub fn set_cpu_shares(&mut self, cpu_shares: i32) {
        self.cpu_shares = Some(cpu_shares);
    }

    pub fn with_cpu_shares(mut self, cpu_shares: i32) -> HostConfig {
        self.cpu_shares = Some(cpu_shares);
        self
    }

    pub fn cpu_shares(&self) -> Option<&i32> {
        self.cpu_shares.as_ref()
    }

    pub fn reset_cpu_shares(&mut self) {
        self.cpu_shares = None;
    }

    pub fn set_memory(&mut self, memory: i64) {
        self.memory = Some(memory);
    }

    pub fn with_memory(mut self, memory: i64) -> HostConfig {
        self.memory = Some(memory);
        self
    }

    pub fn memory(&self) -> Option<&i64> {
        self.memory.as_ref()
    }

    pub fn reset_memory(&mut self) {
        self.memory = None;
    }

    pub fn set_cgroup_parent(&mut self, cgroup_parent: String) {
        self.cgroup_parent = Some(cgroup_parent);
    }

    pub fn with_cgroup_parent(mut self, cgroup_parent: String) -> HostConfig {
        self.cgroup_parent = Some(cgroup_parent);
        self
    }

    pub fn cgroup_parent(&self) -> Option<&String> {
        self.cgroup_parent.as_ref()
    }

    pub fn reset_cgroup_parent(&mut self) {
        self.cgroup_parent = None;
    }

    pub fn set_blkio_weight(&mut self, blkio_weight: i32) {
        self.blkio_weight = Some(blkio_weight);
    }

    pub fn with_blkio_weight(mut self, blkio_weight: i32) -> HostConfig {
        self.blkio_weight = Some(blkio_weight);
        self
    }

    pub fn blkio_weight(&self) -> Option<&i32> {
        self.blkio_weight.as_ref()
    }

    pub fn reset_blkio_weight(&mut self) {
        self.blkio_weight = None;
    }

    pub fn set_blkio_weight_device(
        &mut self,
        blkio_weight_device: Vec<super::ResourcesBlkioWeightDevice>,
    ) {
        self.blkio_weight_device = Some(blkio_weight_device);
    }

    pub fn with_blkio_weight_device(
        mut self,
        blkio_weight_device: Vec<super::ResourcesBlkioWeightDevice>,
    ) -> HostConfig {
        self.blkio_weight_device = Some(blkio_weight_device);
        self
    }

    pub fn blkio_weight_device(&self) -> Option<&Vec<super::ResourcesBlkioWeightDevice>> {
        self.blkio_weight_device.as_ref()
    }

    pub fn reset_blkio_weight_device(&mut self) {
        self.blkio_weight_device = None;
    }

    pub fn set_blkio_device_read_bps(&mut self, blkio_device_read_bps: Vec<super::ThrottleDevice>) {
        self.blkio_device_read_bps = Some(blkio_device_read_bps);
    }

    pub fn with_blkio_device_read_bps(
        mut self,
        blkio_device_read_bps: Vec<super::ThrottleDevice>,
    ) -> HostConfig {
        self.blkio_device_read_bps = Some(blkio_device_read_bps);
        self
    }

    pub fn blkio_device_read_bps(&self) -> Option<&Vec<super::ThrottleDevice>> {
        self.blkio_device_read_bps.as_ref()
    }

    pub fn reset_blkio_device_read_bps(&mut self) {
        self.blkio_device_read_bps = None;
    }

    pub fn set_blkio_device_write_bps(
        &mut self,
        blkio_device_write_bps: Vec<super::ThrottleDevice>,
    ) {
        self.blkio_device_write_bps = Some(blkio_device_write_bps);
    }

    pub fn with_blkio_device_write_bps(
        mut self,
        blkio_device_write_bps: Vec<super::ThrottleDevice>,
    ) -> HostConfig {
        self.blkio_device_write_bps = Some(blkio_device_write_bps);
        self
    }

    pub fn blkio_device_write_bps(&self) -> Option<&Vec<super::ThrottleDevice>> {
        self.blkio_device_write_bps.as_ref()
    }

    pub fn reset_blkio_device_write_bps(&mut self) {
        self.blkio_device_write_bps = None;
    }

    pub fn set_blkio_device_read_i_ops(
        &mut self,
        blkio_device_read_i_ops: Vec<super::ThrottleDevice>,
    ) {
        self.blkio_device_read_i_ops = Some(blkio_device_read_i_ops);
    }

    pub fn with_blkio_device_read_i_ops(
        mut self,
        blkio_device_read_i_ops: Vec<super::ThrottleDevice>,
    ) -> HostConfig {
        self.blkio_device_read_i_ops = Some(blkio_device_read_i_ops);
        self
    }

    pub fn blkio_device_read_i_ops(&self) -> Option<&Vec<super::ThrottleDevice>> {
        self.blkio_device_read_i_ops.as_ref()
    }

    pub fn reset_blkio_device_read_i_ops(&mut self) {
        self.blkio_device_read_i_ops = None;
    }

    pub fn set_blkio_device_write_i_ops(
        &mut self,
        blkio_device_write_i_ops: Vec<super::ThrottleDevice>,
    ) {
        self.blkio_device_write_i_ops = Some(blkio_device_write_i_ops);
    }

    pub fn with_blkio_device_write_i_ops(
        mut self,
        blkio_device_write_i_ops: Vec<super::ThrottleDevice>,
    ) -> HostConfig {
        self.blkio_device_write_i_ops = Some(blkio_device_write_i_ops);
        self
    }

    pub fn blkio_device_write_i_ops(&self) -> Option<&Vec<super::ThrottleDevice>> {
        self.blkio_device_write_i_ops.as_ref()
    }

    pub fn reset_blkio_device_write_i_ops(&mut self) {
        self.blkio_device_write_i_ops = None;
    }

    pub fn set_cpu_period(&mut self, cpu_period: i64) {
        self.cpu_period = Some(cpu_period);
    }

    pub fn with_cpu_period(mut self, cpu_period: i64) -> HostConfig {
        self.cpu_period = Some(cpu_period);
        self
    }

    pub fn cpu_period(&self) -> Option<&i64> {
        self.cpu_period.as_ref()
    }

    pub fn reset_cpu_period(&mut self) {
        self.cpu_period = None;
    }

    pub fn set_cpu_quota(&mut self, cpu_quota: i64) {
        self.cpu_quota = Some(cpu_quota);
    }

    pub fn with_cpu_quota(mut self, cpu_quota: i64) -> HostConfig {
        self.cpu_quota = Some(cpu_quota);
        self
    }

    pub fn cpu_quota(&self) -> Option<&i64> {
        self.cpu_quota.as_ref()
    }

    pub fn reset_cpu_quota(&mut self) {
        self.cpu_quota = None;
    }

    pub fn set_cpu_realtime_period(&mut self, cpu_realtime_period: i64) {
        self.cpu_realtime_period = Some(cpu_realtime_period);
    }

    pub fn with_cpu_realtime_period(mut self, cpu_realtime_period: i64) -> HostConfig {
        self.cpu_realtime_period = Some(cpu_realtime_period);
        self
    }

    pub fn cpu_realtime_period(&self) -> Option<&i64> {
        self.cpu_realtime_period.as_ref()
    }

    pub fn reset_cpu_realtime_period(&mut self) {
        self.cpu_realtime_period = None;
    }

    pub fn set_cpu_realtime_runtime(&mut self, cpu_realtime_runtime: i64) {
        self.cpu_realtime_runtime = Some(cpu_realtime_runtime);
    }

    pub fn with_cpu_realtime_runtime(mut self, cpu_realtime_runtime: i64) -> HostConfig {
        self.cpu_realtime_runtime = Some(cpu_realtime_runtime);
        self
    }

    pub fn cpu_realtime_runtime(&self) -> Option<&i64> {
        self.cpu_realtime_runtime.as_ref()
    }

    pub fn reset_cpu_realtime_runtime(&mut self) {
        self.cpu_realtime_runtime = None;
    }

    pub fn set_cpuset_cpus(&mut self, cpuset_cpus: String) {
        self.cpuset_cpus = Some(cpuset_cpus);
    }

    pub fn with_cpuset_cpus(mut self, cpuset_cpus: String) -> HostConfig {
        self.cpuset_cpus = Some(cpuset_cpus);
        self
    }

    pub fn cpuset_cpus(&self) -> Option<&String> {
        self.cpuset_cpus.as_ref()
    }

    pub fn reset_cpuset_cpus(&mut self) {
        self.cpuset_cpus = None;
    }

    pub fn set_cpuset_mems(&mut self, cpuset_mems: String) {
        self.cpuset_mems = Some(cpuset_mems);
    }

    pub fn with_cpuset_mems(mut self, cpuset_mems: String) -> HostConfig {
        self.cpuset_mems = Some(cpuset_mems);
        self
    }

    pub fn cpuset_mems(&self) -> Option<&String> {
        self.cpuset_mems.as_ref()
    }

    pub fn reset_cpuset_mems(&mut self) {
        self.cpuset_mems = None;
    }

    pub fn set_devices(&mut self, devices: Vec<super::DeviceMapping>) {
        self.devices = Some(devices);
    }

    pub fn with_devices(mut self, devices: Vec<super::DeviceMapping>) -> HostConfig {
        self.devices = Some(devices);
        self
    }

    pub fn devices(&self) -> Option<&Vec<super::DeviceMapping>> {
        self.devices.as_ref()
    }

    pub fn reset_devices(&mut self) {
        self.devices = None;
    }

    pub fn set_device_cgroup_rules(&mut self, device_cgroup_rules: Vec<String>) {
        self.device_cgroup_rules = Some(device_cgroup_rules);
    }

    pub fn with_device_cgroup_rules(mut self, device_cgroup_rules: Vec<String>) -> HostConfig {
        self.device_cgroup_rules = Some(device_cgroup_rules);
        self
    }

    pub fn device_cgroup_rules(&self) -> Option<&Vec<String>> {
        self.device_cgroup_rules.as_ref()
    }

    pub fn reset_device_cgroup_rules(&mut self) {
        self.device_cgroup_rules = None;
    }

    pub fn set_device_requests(&mut self, device_requests: Vec<super::DeviceRequest>) {
        self.device_requests = Some(device_requests);
    }

    pub fn with_device_requests(
        mut self,
        device_requests: Vec<super::DeviceRequest>,
    ) -> HostConfig {
        self.device_requests = Some(device_requests);
        self
    }

    pub fn device_requests(&self) -> Option<&Vec<super::DeviceRequest>> {
        self.device_requests.as_ref()
    }

    pub fn reset_device_requests(&mut self) {
        self.device_requests = None;
    }

    pub fn set_kernel_memory(&mut self, kernel_memory: i64) {
        self.kernel_memory = Some(kernel_memory);
    }

    pub fn with_kernel_memory(mut self, kernel_memory: i64) -> HostConfig {
        self.kernel_memory = Some(kernel_memory);
        self
    }

    pub fn kernel_memory(&self) -> Option<&i64> {
        self.kernel_memory.as_ref()
    }

    pub fn reset_kernel_memory(&mut self) {
        self.kernel_memory = None;
    }

    pub fn set_kernel_memory_tcp(&mut self, kernel_memory_tcp: i64) {
        self.kernel_memory_tcp = Some(kernel_memory_tcp);
    }

    pub fn with_kernel_memory_tcp(mut self, kernel_memory_tcp: i64) -> HostConfig {
        self.kernel_memory_tcp = Some(kernel_memory_tcp);
        self
    }

    pub fn kernel_memory_tcp(&self) -> Option<&i64> {
        self.kernel_memory_tcp.as_ref()
    }

    pub fn reset_kernel_memory_tcp(&mut self) {
        self.kernel_memory_tcp = None;
    }

    pub fn set_memory_reservation(&mut self, memory_reservation: i64) {
        self.memory_reservation = Some(memory_reservation);
    }

    pub fn with_memory_reservation(mut self, memory_reservation: i64) -> HostConfig {
        self.memory_reservation = Some(memory_reservation);
        self
    }

    pub fn memory_reservation(&self) -> Option<&i64> {
        self.memory_reservation.as_ref()
    }

    pub fn reset_memory_reservation(&mut self) {
        self.memory_reservation = None;
    }

    pub fn set_memory_swap(&mut self, memory_swap: i64) {
        self.memory_swap = Some(memory_swap);
    }

    pub fn with_memory_swap(mut self, memory_swap: i64) -> HostConfig {
        self.memory_swap = Some(memory_swap);
        self
    }

    pub fn memory_swap(&self) -> Option<&i64> {
        self.memory_swap.as_ref()
    }

    pub fn reset_memory_swap(&mut self) {
        self.memory_swap = None;
    }

    pub fn set_memory_swappiness(&mut self, memory_swappiness: i64) {
        self.memory_swappiness = Some(memory_swappiness);
    }

    pub fn with_memory_swappiness(mut self, memory_swappiness: i64) -> HostConfig {
        self.memory_swappiness = Some(memory_swappiness);
        self
    }

    pub fn memory_swappiness(&self) -> Option<&i64> {
        self.memory_swappiness.as_ref()
    }

    pub fn reset_memory_swappiness(&mut self) {
        self.memory_swappiness = None;
    }

    pub fn set_nano_cp_us(&mut self, nano_cp_us: i64) {
        self.nano_cp_us = Some(nano_cp_us);
    }

    pub fn with_nano_cp_us(mut self, nano_cp_us: i64) -> HostConfig {
        self.nano_cp_us = Some(nano_cp_us);
        self
    }

    pub fn nano_cp_us(&self) -> Option<&i64> {
        self.nano_cp_us.as_ref()
    }

    pub fn reset_nano_cp_us(&mut self) {
        self.nano_cp_us = None;
    }

    pub fn set_oom_kill_disable(&mut self, oom_kill_disable: bool) {
        self.oom_kill_disable = Some(oom_kill_disable);
    }

    pub fn with_oom_kill_disable(mut self, oom_kill_disable: bool) -> HostConfig {
        self.oom_kill_disable = Some(oom_kill_disable);
        self
    }

    pub fn oom_kill_disable(&self) -> Option<&bool> {
        self.oom_kill_disable.as_ref()
    }

    pub fn reset_oom_kill_disable(&mut self) {
        self.oom_kill_disable = None;
    }

    pub fn set_init(&mut self, init: bool) {
        self.init = Some(init);
    }

    pub fn with_init(mut self, init: bool) -> HostConfig {
        self.init = Some(init);
        self
    }

    pub fn init(&self) -> Option<&bool> {
        self.init.as_ref()
    }

    pub fn reset_init(&mut self) {
        self.init = None;
    }

    pub fn set_pids_limit(&mut self, pids_limit: i64) {
        self.pids_limit = Some(pids_limit);
    }

    pub fn with_pids_limit(mut self, pids_limit: i64) -> HostConfig {
        self.pids_limit = Some(pids_limit);
        self
    }

    pub fn pids_limit(&self) -> Option<&i64> {
        self.pids_limit.as_ref()
    }

    pub fn reset_pids_limit(&mut self) {
        self.pids_limit = None;
    }

    pub fn set_ulimits(&mut self, ulimits: Vec<super::ResourcesUlimits>) {
        self.ulimits = Some(ulimits);
    }

    pub fn with_ulimits(mut self, ulimits: Vec<super::ResourcesUlimits>) -> HostConfig {
        self.ulimits = Some(ulimits);
        self
    }

    pub fn ulimits(&self) -> Option<&Vec<super::ResourcesUlimits>> {
        self.ulimits.as_ref()
    }

    pub fn reset_ulimits(&mut self) {
        self.ulimits = None;
    }

    pub fn set_cpu_count(&mut self, cpu_count: i64) {
        self.cpu_count = Some(cpu_count);
    }

    pub fn with_cpu_count(mut self, cpu_count: i64) -> HostConfig {
        self.cpu_count = Some(cpu_count);
        self
    }

    pub fn cpu_count(&self) -> Option<&i64> {
        self.cpu_count.as_ref()
    }

    pub fn reset_cpu_count(&mut self) {
        self.cpu_count = None;
    }

    pub fn set_cpu_percent(&mut self, cpu_percent: i64) {
        self.cpu_percent = Some(cpu_percent);
    }

    pub fn with_cpu_percent(mut self, cpu_percent: i64) -> HostConfig {
        self.cpu_percent = Some(cpu_percent);
        self
    }

    pub fn cpu_percent(&self) -> Option<&i64> {
        self.cpu_percent.as_ref()
    }

    pub fn reset_cpu_percent(&mut self) {
        self.cpu_percent = None;
    }

    pub fn set_io_maximum_i_ops(&mut self, io_maximum_i_ops: i64) {
        self.io_maximum_i_ops = Some(io_maximum_i_ops);
    }

    pub fn with_io_maximum_i_ops(mut self, io_maximum_i_ops: i64) -> HostConfig {
        self.io_maximum_i_ops = Some(io_maximum_i_ops);
        self
    }

    pub fn io_maximum_i_ops(&self) -> Option<&i64> {
        self.io_maximum_i_ops.as_ref()
    }

    pub fn reset_io_maximum_i_ops(&mut self) {
        self.io_maximum_i_ops = None;
    }

    pub fn set_io_maximum_bandwidth(&mut self, io_maximum_bandwidth: i64) {
        self.io_maximum_bandwidth = Some(io_maximum_bandwidth);
    }

    pub fn with_io_maximum_bandwidth(mut self, io_maximum_bandwidth: i64) -> HostConfig {
        self.io_maximum_bandwidth = Some(io_maximum_bandwidth);
        self
    }

    pub fn io_maximum_bandwidth(&self) -> Option<&i64> {
        self.io_maximum_bandwidth.as_ref()
    }

    pub fn reset_io_maximum_bandwidth(&mut self) {
        self.io_maximum_bandwidth = None;
    }

    pub fn set_binds(&mut self, binds: Vec<String>) {
        self.binds = Some(binds);
    }

    pub fn with_binds(mut self, binds: Vec<String>) -> HostConfig {
        self.binds = Some(binds);
        self
    }

    pub fn binds(&self) -> Option<&Vec<String>> {
        self.binds.as_ref()
    }

    pub fn reset_binds(&mut self) {
        self.binds = None;
    }

    pub fn set_container_id_file(&mut self, container_id_file: String) {
        self.container_id_file = Some(container_id_file);
    }

    pub fn with_container_id_file(mut self, container_id_file: String) -> HostConfig {
        self.container_id_file = Some(container_id_file);
        self
    }

    pub fn container_id_file(&self) -> Option<&String> {
        self.container_id_file.as_ref()
    }

    pub fn reset_container_id_file(&mut self) {
        self.container_id_file = None;
    }

    pub fn set_log_config(&mut self, log_config: super::HostConfigLogConfig) {
        self.log_config = Some(log_config);
    }

    pub fn with_log_config(mut self, log_config: super::HostConfigLogConfig) -> HostConfig {
        self.log_config = Some(log_config);
        self
    }

    pub fn log_config(&self) -> Option<&super::HostConfigLogConfig> {
        self.log_config.as_ref()
    }

    pub fn reset_log_config(&mut self) {
        self.log_config = None;
    }

    pub fn set_network_mode(&mut self, network_mode: String) {
        self.network_mode = Some(network_mode);
    }

    pub fn with_network_mode(mut self, network_mode: String) -> HostConfig {
        self.network_mode = Some(network_mode);
        self
    }

    pub fn network_mode(&self) -> Option<&String> {
        self.network_mode.as_ref()
    }

    pub fn reset_network_mode(&mut self) {
        self.network_mode = None;
    }

    pub fn set_port_bindings(&mut self, port_bindings: super::PortMap) {
        self.port_bindings = Some(port_bindings);
    }

    pub fn with_port_bindings(mut self, port_bindings: super::PortMap) -> HostConfig {
        self.port_bindings = Some(port_bindings);
        self
    }

    pub fn port_bindings(&self) -> Option<&super::PortMap> {
        self.port_bindings.as_ref()
    }

    pub fn reset_port_bindings(&mut self) {
        self.port_bindings = None;
    }

    pub fn set_restart_policy(&mut self, restart_policy: super::RestartPolicy) {
        self.restart_policy = Some(restart_policy);
    }

    pub fn with_restart_policy(mut self, restart_policy: super::RestartPolicy) -> HostConfig {
        self.restart_policy = Some(restart_policy);
        self
    }

    pub fn restart_policy(&self) -> Option<&super::RestartPolicy> {
        self.restart_policy.as_ref()
    }

    pub fn reset_restart_policy(&mut self) {
        self.restart_policy = None;
    }

    pub fn set_auto_remove(&mut self, auto_remove: bool) {
        self.auto_remove = Some(auto_remove);
    }

    pub fn with_auto_remove(mut self, auto_remove: bool) -> HostConfig {
        self.auto_remove = Some(auto_remove);
        self
    }

    pub fn auto_remove(&self) -> Option<&bool> {
        self.auto_remove.as_ref()
    }

    pub fn reset_auto_remove(&mut self) {
        self.auto_remove = None;
    }

    pub fn set_volume_driver(&mut self, volume_driver: String) {
        self.volume_driver = Some(volume_driver);
    }

    pub fn with_volume_driver(mut self, volume_driver: String) -> HostConfig {
        self.volume_driver = Some(volume_driver);
        self
    }

    pub fn volume_driver(&self) -> Option<&String> {
        self.volume_driver.as_ref()
    }

    pub fn reset_volume_driver(&mut self) {
        self.volume_driver = None;
    }

    pub fn set_volumes_from(&mut self, volumes_from: Vec<String>) {
        self.volumes_from = Some(volumes_from);
    }

    pub fn with_volumes_from(mut self, volumes_from: Vec<String>) -> HostConfig {
        self.volumes_from = Some(volumes_from);
        self
    }

    pub fn volumes_from(&self) -> Option<&Vec<String>> {
        self.volumes_from.as_ref()
    }

    pub fn reset_volumes_from(&mut self) {
        self.volumes_from = None;
    }

    pub fn set_mounts(&mut self, mounts: Vec<super::Mount>) {
        self.mounts = Some(mounts);
    }

    pub fn with_mounts(mut self, mounts: Vec<super::Mount>) -> HostConfig {
        self.mounts = Some(mounts);
        self
    }

    pub fn mounts(&self) -> Option<&Vec<super::Mount>> {
        self.mounts.as_ref()
    }

    pub fn reset_mounts(&mut self) {
        self.mounts = None;
    }

    pub fn set_capabilities(&mut self, capabilities: Vec<String>) {
        self.capabilities = Some(capabilities);
    }

    pub fn with_capabilities(mut self, capabilities: Vec<String>) -> HostConfig {
        self.capabilities = Some(capabilities);
        self
    }

    pub fn capabilities(&self) -> Option<&Vec<String>> {
        self.capabilities.as_ref()
    }

    pub fn reset_capabilities(&mut self) {
        self.capabilities = None;
    }

    pub fn set_cap_add(&mut self, cap_add: Vec<String>) {
        self.cap_add = Some(cap_add);
    }

    pub fn with_cap_add(mut self, cap_add: Vec<String>) -> HostConfig {
        self.cap_add = Some(cap_add);
        self
    }

    pub fn cap_add(&self) -> Option<&Vec<String>> {
        self.cap_add.as_ref()
    }

    pub fn reset_cap_add(&mut self) {
        self.cap_add = None;
    }

    pub fn set_cap_drop(&mut self, cap_drop: Vec<String>) {
        self.cap_drop = Some(cap_drop);
    }

    pub fn with_cap_drop(mut self, cap_drop: Vec<String>) -> HostConfig {
        self.cap_drop = Some(cap_drop);
        self
    }

    pub fn cap_drop(&self) -> Option<&Vec<String>> {
        self.cap_drop.as_ref()
    }

    pub fn reset_cap_drop(&mut self) {
        self.cap_drop = None;
    }

    pub fn set_dns(&mut self, dns: Vec<String>) {
        self.dns = Some(dns);
    }

    pub fn with_dns(mut self, dns: Vec<String>) -> HostConfig {
        self.dns = Some(dns);
        self
    }

    pub fn dns(&self) -> Option<&Vec<String>> {
        self.dns.as_ref()
    }

    pub fn reset_dns(&mut self) {
        self.dns = None;
    }

    pub fn set_dns_options(&mut self, dns_options: Vec<String>) {
        self.dns_options = Some(dns_options);
    }

    pub fn with_dns_options(mut self, dns_options: Vec<String>) -> HostConfig {
        self.dns_options = Some(dns_options);
        self
    }

    pub fn dns_options(&self) -> Option<&Vec<String>> {
        self.dns_options.as_ref()
    }

    pub fn reset_dns_options(&mut self) {
        self.dns_options = None;
    }

    pub fn set_dns_search(&mut self, dns_search: Vec<String>) {
        self.dns_search = Some(dns_search);
    }

    pub fn with_dns_search(mut self, dns_search: Vec<String>) -> HostConfig {
        self.dns_search = Some(dns_search);
        self
    }

    pub fn dns_search(&self) -> Option<&Vec<String>> {
        self.dns_search.as_ref()
    }

    pub fn reset_dns_search(&mut self) {
        self.dns_search = None;
    }

    pub fn set_extra_hosts(&mut self, extra_hosts: Vec<String>) {
        self.extra_hosts = Some(extra_hosts);
    }

    pub fn with_extra_hosts(mut self, extra_hosts: Vec<String>) -> HostConfig {
        self.extra_hosts = Some(extra_hosts);
        self
    }

    pub fn extra_hosts(&self) -> Option<&Vec<String>> {
        self.extra_hosts.as_ref()
    }

    pub fn reset_extra_hosts(&mut self) {
        self.extra_hosts = None;
    }

    pub fn set_group_add(&mut self, group_add: Vec<String>) {
        self.group_add = Some(group_add);
    }

    pub fn with_group_add(mut self, group_add: Vec<String>) -> HostConfig {
        self.group_add = Some(group_add);
        self
    }

    pub fn group_add(&self) -> Option<&Vec<String>> {
        self.group_add.as_ref()
    }

    pub fn reset_group_add(&mut self) {
        self.group_add = None;
    }

    pub fn set_ipc_mode(&mut self, ipc_mode: String) {
        self.ipc_mode = Some(ipc_mode);
    }

    pub fn with_ipc_mode(mut self, ipc_mode: String) -> HostConfig {
        self.ipc_mode = Some(ipc_mode);
        self
    }

    pub fn ipc_mode(&self) -> Option<&String> {
        self.ipc_mode.as_ref()
    }

    pub fn reset_ipc_mode(&mut self) {
        self.ipc_mode = None;
    }

    pub fn set_cgroup(&mut self, cgroup: String) {
        self.cgroup = Some(cgroup);
    }

    pub fn with_cgroup(mut self, cgroup: String) -> HostConfig {
        self.cgroup = Some(cgroup);
        self
    }

    pub fn cgroup(&self) -> Option<&String> {
        self.cgroup.as_ref()
    }

    pub fn reset_cgroup(&mut self) {
        self.cgroup = None;
    }

    pub fn set_links(&mut self, links: Vec<String>) {
        self.links = Some(links);
    }

    pub fn with_links(mut self, links: Vec<String>) -> HostConfig {
        self.links = Some(links);
        self
    }

    pub fn links(&self) -> Option<&Vec<String>> {
        self.links.as_ref()
    }

    pub fn reset_links(&mut self) {
        self.links = None;
    }

    pub fn set_oom_score_adj(&mut self, oom_score_adj: i32) {
        self.oom_score_adj = Some(oom_score_adj);
    }

    pub fn with_oom_score_adj(mut self, oom_score_adj: i32) -> HostConfig {
        self.oom_score_adj = Some(oom_score_adj);
        self
    }

    pub fn oom_score_adj(&self) -> Option<&i32> {
        self.oom_score_adj.as_ref()
    }

    pub fn reset_oom_score_adj(&mut self) {
        self.oom_score_adj = None;
    }

    pub fn set_pid_mode(&mut self, pid_mode: String) {
        self.pid_mode = Some(pid_mode);
    }

    pub fn with_pid_mode(mut self, pid_mode: String) -> HostConfig {
        self.pid_mode = Some(pid_mode);
        self
    }

    pub fn pid_mode(&self) -> Option<&String> {
        self.pid_mode.as_ref()
    }

    pub fn reset_pid_mode(&mut self) {
        self.pid_mode = None;
    }

    pub fn set_privileged(&mut self, privileged: bool) {
        self.privileged = Some(privileged);
    }

    pub fn with_privileged(mut self, privileged: bool) -> HostConfig {
        self.privileged = Some(privileged);
        self
    }

    pub fn privileged(&self) -> Option<&bool> {
        self.privileged.as_ref()
    }

    pub fn reset_privileged(&mut self) {
        self.privileged = None;
    }

    pub fn set_publish_all_ports(&mut self, publish_all_ports: bool) {
        self.publish_all_ports = Some(publish_all_ports);
    }

    pub fn with_publish_all_ports(mut self, publish_all_ports: bool) -> HostConfig {
        self.publish_all_ports = Some(publish_all_ports);
        self
    }

    pub fn publish_all_ports(&self) -> Option<&bool> {
        self.publish_all_ports.as_ref()
    }

    pub fn reset_publish_all_ports(&mut self) {
        self.publish_all_ports = None;
    }

    pub fn set_readonly_rootfs(&mut self, readonly_rootfs: bool) {
        self.readonly_rootfs = Some(readonly_rootfs);
    }

    pub fn with_readonly_rootfs(mut self, readonly_rootfs: bool) -> HostConfig {
        self.readonly_rootfs = Some(readonly_rootfs);
        self
    }

    pub fn readonly_rootfs(&self) -> Option<&bool> {
        self.readonly_rootfs.as_ref()
    }

    pub fn reset_readonly_rootfs(&mut self) {
        self.readonly_rootfs = None;
    }

    pub fn set_security_opt(&mut self, security_opt: Vec<String>) {
        self.security_opt = Some(security_opt);
    }

    pub fn with_security_opt(mut self, security_opt: Vec<String>) -> HostConfig {
        self.security_opt = Some(security_opt);
        self
    }

    pub fn security_opt(&self) -> Option<&Vec<String>> {
        self.security_opt.as_ref()
    }

    pub fn reset_security_opt(&mut self) {
        self.security_opt = None;
    }

    pub fn set_storage_opt(&mut self, storage_opt: ::std::collections::HashMap<String, String>) {
        self.storage_opt = Some(storage_opt);
    }

    pub fn with_storage_opt(
        mut self,
        storage_opt: ::std::collections::HashMap<String, String>,
    ) -> HostConfig {
        self.storage_opt = Some(storage_opt);
        self
    }

    pub fn storage_opt(&self) -> Option<&::std::collections::HashMap<String, String>> {
        self.storage_opt.as_ref()
    }

    pub fn reset_storage_opt(&mut self) {
        self.storage_opt = None;
    }

    pub fn set_tmpfs(&mut self, tmpfs: ::std::collections::HashMap<String, String>) {
        self.tmpfs = Some(tmpfs);
    }

    pub fn with_tmpfs(mut self, tmpfs: ::std::collections::HashMap<String, String>) -> HostConfig {
        self.tmpfs = Some(tmpfs);
        self
    }

    pub fn tmpfs(&self) -> Option<&::std::collections::HashMap<String, String>> {
        self.tmpfs.as_ref()
    }

    pub fn reset_tmpfs(&mut self) {
        self.tmpfs = None;
    }

    pub fn set_uts_mode(&mut self, uts_mode: String) {
        self.uts_mode = Some(uts_mode);
    }

    pub fn with_uts_mode(mut self, uts_mode: String) -> HostConfig {
        self.uts_mode = Some(uts_mode);
        self
    }

    pub fn uts_mode(&self) -> Option<&String> {
        self.uts_mode.as_ref()
    }

    pub fn reset_uts_mode(&mut self) {
        self.uts_mode = None;
    }

    pub fn set_userns_mode(&mut self, userns_mode: String) {
        self.userns_mode = Some(userns_mode);
    }

    pub fn with_userns_mode(mut self, userns_mode: String) -> HostConfig {
        self.userns_mode = Some(userns_mode);
        self
    }

    pub fn userns_mode(&self) -> Option<&String> {
        self.userns_mode.as_ref()
    }

    pub fn reset_userns_mode(&mut self) {
        self.userns_mode = None;
    }

    pub fn set_shm_size(&mut self, shm_size: i32) {
        self.shm_size = Some(shm_size);
    }

    pub fn with_shm_size(mut self, shm_size: i32) -> HostConfig {
        self.shm_size = Some(shm_size);
        self
    }

    pub fn shm_size(&self) -> Option<&i32> {
        self.shm_size.as_ref()
    }

    pub fn reset_shm_size(&mut self) {
        self.shm_size = None;
    }

    pub fn set_sysctls(&mut self, sysctls: ::std::collections::HashMap<String, String>) {
        self.sysctls = Some(sysctls);
    }

    pub fn with_sysctls(
        mut self,
        sysctls: ::std::collections::HashMap<String, String>,
    ) -> HostConfig {
        self.sysctls = Some(sysctls);
        self
    }

    pub fn sysctls(&self) -> Option<&::std::collections::HashMap<String, String>> {
        self.sysctls.as_ref()
    }

    pub fn reset_sysctls(&mut self) {
        self.sysctls = None;
    }

    pub fn set_runtime(&mut self, runtime: String) {
        self.runtime = Some(runtime);
    }

    pub fn with_runtime(mut self, runtime: String) -> HostConfig {
        self.runtime = Some(runtime);
        self
    }

    pub fn runtime(&self) -> Option<&String> {
        self.runtime.as_ref()
    }

    pub fn reset_runtime(&mut self) {
        self.runtime = None;
    }

    pub fn set_console_size(&mut self, console_size: Vec<i32>) {
        self.console_size = Some(console_size);
    }

    pub fn with_console_size(mut self, console_size: Vec<i32>) -> HostConfig {
        self.console_size = Some(console_size);
        self
    }

    pub fn console_size(&self) -> Option<&Vec<i32>> {
        self.console_size.as_ref()
    }

    pub fn reset_console_size(&mut self) {
        self.console_size = None;
    }

    pub fn set_isolation(&mut self, isolation: String) {
        self.isolation = Some(isolation);
    }

    pub fn with_isolation(mut self, isolation: String) -> HostConfig {
        self.isolation = Some(isolation);
        self
    }

    pub fn isolation(&self) -> Option<&String> {
        self.isolation.as_ref()
    }

    pub fn reset_isolation(&mut self) {
        self.isolation = None;
    }

    pub fn set_masked_paths(&mut self, masked_paths: Vec<String>) {
        self.masked_paths = Some(masked_paths);
    }

    pub fn with_masked_paths(mut self, masked_paths: Vec<String>) -> HostConfig {
        self.masked_paths = Some(masked_paths);
        self
    }

    pub fn masked_paths(&self) -> Option<&Vec<String>> {
        self.masked_paths.as_ref()
    }

    pub fn reset_masked_paths(&mut self) {
        self.masked_paths = None;
    }

    pub fn set_readonly_paths(&mut self, readonly_paths: Vec<String>) {
        self.readonly_paths = Some(readonly_paths);
    }

    pub fn with_readonly_paths(mut self, readonly_paths: Vec<String>) -> HostConfig {
        self.readonly_paths = Some(readonly_paths);
        self
    }

    pub fn readonly_paths(&self) -> Option<&Vec<String>> {
        self.readonly_paths.as_ref()
    }

    pub fn reset_readonly_paths(&mut self) {
        self.readonly_paths = None;
    }
}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "guild")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub guild_id: String,
    #[sea_orm(column_type = "Binary(1)")]
    pub public_key: Vec<u8>,
    #[sea_orm(column_type = "Binary(1)")]
    pub private_key: Vec<u8>,
    #[sea_orm(column_type = "Binary(1)")]
    pub nonce: Vec<u8>,
    pub created_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::event::Entity")]
    Event,
    #[sea_orm(has_many = "super::guild_member::Entity")]
    GuildMember,
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl Related<super::guild_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildMember.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub guild: i32,
    pub guild_member: i32,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub r#type: String,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub sub_type: String,
    pub created_at: DateTimeUtc,
    pub data: Json,
    #[sea_orm(column_type = "Binary(1)")]
    pub row_encryption_key: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guild::Entity",
        from = "Column::Guild",
        to = "super::guild::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Guild,
    #[sea_orm(
        belongs_to = "super::guild_member::Entity",
        from = "Column::GuildMember",
        to = "super::guild_member::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    GuildMember,
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::guild_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildMember.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
